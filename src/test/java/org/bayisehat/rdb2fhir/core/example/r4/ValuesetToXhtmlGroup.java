package org.bayisehat.rdb2fhir.core.example.r4;

import org.bayisehat.rdb2fhir.core.example.BaseExampleTest;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

public class ValuesetToXhtmlGroup extends BaseExampleTest {

    @Test  void valueset_FHIR_version() throws Exception { assertEqual("valueset-FHIR-version.json"); }
    @Test  void valueset_abstract_types() throws Exception { assertEqual("valueset-abstract-types.json"); }
    @Test  void valueset_account_status() throws Exception { assertEqual("valueset-account-status.json"); }
    @Test  void valueset_account_type() throws Exception { assertEqual("valueset-account-type.json"); }
    @Test  void valueset_action_cardinality_behavior() throws Exception { assertEqual("valueset-action-cardinality-behavior.json"); }
    @Test  void valueset_action_condition_kind() throws Exception { assertEqual("valueset-action-condition-kind.json"); }
    @Test  void valueset_action_grouping_behavior() throws Exception { assertEqual("valueset-action-grouping-behavior.json"); }
    @Test  void valueset_action_participant_role() throws Exception { assertEqual("valueset-action-participant-role.json"); }
    @Test  void valueset_action_participant_type() throws Exception { assertEqual("valueset-action-participant-type.json"); }
    @Test  void valueset_action_precheck_behavior() throws Exception { assertEqual("valueset-action-precheck-behavior.json"); }
    @Test  void valueset_action_relationship_type() throws Exception { assertEqual("valueset-action-relationship-type.json"); }
    @Test  void valueset_action_required_behavior() throws Exception { assertEqual("valueset-action-required-behavior.json"); }
    @Test  void valueset_action_selection_behavior() throws Exception { assertEqual("valueset-action-selection-behavior.json"); }
    @Test  void valueset_action_type() throws Exception { assertEqual("valueset-action-type.json"); }
    @Test  void valueset_activity_definition_category() throws Exception { assertEqual("valueset-activity-definition-category.json"); }
    @Test  void valueset_additional_instruction_codes() throws Exception { assertEqual("valueset-additional-instruction-codes.json"); }
    @Test  void valueset_additionalmaterials() throws Exception { assertEqual("valueset-additionalmaterials.json"); }
    @Test  void valueset_address_type() throws Exception { assertEqual("valueset-address-type.json"); }
    @Test  void valueset_address_use() throws Exception { assertEqual("valueset-address-use.json"); }
    @Test  void valueset_adjudication_error() throws Exception { assertEqual("valueset-adjudication-error.json"); }
    @Test  void valueset_adjudication_reason() throws Exception { assertEqual("valueset-adjudication-reason.json"); }
    @Test  void valueset_adjudication() throws Exception { assertEqual("valueset-adjudication.json"); }
    @Test  void valueset_administration_method_codes() throws Exception { assertEqual("valueset-administration-method-codes.json"); }
    @Test  void valueset_administrative_gender() throws Exception { assertEqual("valueset-administrative-gender.json"); }
    @Test  void valueset_adverse_event_actuality() throws Exception { assertEqual("valueset-adverse-event-actuality.json"); }
    @Test  void valueset_adverse_event_category() throws Exception { assertEqual("valueset-adverse-event-category.json"); }
    @Test  void valueset_adverse_event_causality_assess() throws Exception { assertEqual("valueset-adverse-event-causality-assess.json"); }
    @Test  void valueset_adverse_event_causality_method() throws Exception { assertEqual("valueset-adverse-event-causality-method.json"); }
    @Test  void valueset_adverse_event_outcome() throws Exception { assertEqual("valueset-adverse-event-outcome.json"); }
    @Test  void valueset_adverse_event_seriousness() throws Exception { assertEqual("valueset-adverse-event-seriousness.json"); }
    @Test  void valueset_adverse_event_severity() throws Exception { assertEqual("valueset-adverse-event-severity.json"); }
    @Test  void valueset_adverse_event_type() throws Exception { assertEqual("valueset-adverse-event-type.json"); }
    @Test  void valueset_age_units() throws Exception { assertEqual("valueset-age-units.json"); }
    @Test  void valueset_all_distance_units() throws Exception { assertEqual("valueset-all-distance-units.json"); }
    @Test  void valueset_all_languages() throws Exception { assertEqual("valueset-all-languages.json"); }
    @Test  void valueset_all_time_units() throws Exception { assertEqual("valueset-all-time-units.json"); }
    @Test  void valueset_all_types() throws Exception { assertEqual("valueset-all-types.json"); }
    @Test  void valueset_allelename() throws Exception { assertEqual("valueset-allelename.json"); }
    @Test  void valueset_allerg_intol_substance_exp_risk() throws Exception { assertEqual("valueset-allerg-intol-substance-exp-risk.json"); }
    @Test  void valueset_allergy_intolerance_category() throws Exception { assertEqual("valueset-allergy-intolerance-category.json"); }
    @Test  void valueset_allergy_intolerance_criticality() throws Exception { assertEqual("valueset-allergy-intolerance-criticality.json"); }
    @Test  void valueset_allergy_intolerance_type() throws Exception { assertEqual("valueset-allergy-intolerance-type.json"); }
    @Test  void valueset_allergyintolerance_clinical() throws Exception { assertEqual("valueset-allergyintolerance-clinical.json"); }
    @Test  void valueset_allergyintolerance_code() throws Exception { assertEqual("valueset-allergyintolerance-code.json"); }
    @Test  void valueset_allergyintolerance_verification() throws Exception { assertEqual("valueset-allergyintolerance-verification.json"); }
    @Test @Tag("multi")  void valueset_animal_breeds() throws Exception { assertEqual("valueset-animal-breeds.json"); }
    @Test  void valueset_animal_genderstatus() throws Exception { assertEqual("valueset-animal-genderstatus.json"); }
    @Test @Tag("multi")  void valueset_animal_species() throws Exception { assertEqual("valueset-animal-species.json"); }
    @Test  void valueset_appointment_cancellation_reason() throws Exception { assertEqual("valueset-appointment-cancellation-reason.json"); }
    @Test  void valueset_appointmentstatus() throws Exception { assertEqual("valueset-appointmentstatus.json"); }
    @Test  void valueset_approach_site_codes() throws Exception { assertEqual("valueset-approach-site-codes.json"); }
    @Test  void valueset_assert_direction_codes() throws Exception { assertEqual("valueset-assert-direction-codes.json"); }
    @Test  void valueset_assert_operator_codes() throws Exception { assertEqual("valueset-assert-operator-codes.json"); }
    @Test  void valueset_assert_response_code_types() throws Exception { assertEqual("valueset-assert-response-code-types.json"); }
    @Test  void valueset_asset_availability() throws Exception { assertEqual("valueset-asset-availability.json"); }
    @Test  void valueset_audit_entity_type() throws Exception { assertEqual("valueset-audit-entity-type.json"); }
    @Test  void valueset_audit_event_action() throws Exception { assertEqual("valueset-audit-event-action.json"); }
    @Test  void valueset_audit_event_outcome() throws Exception { assertEqual("valueset-audit-event-outcome.json"); }
    @Test @Tag("multi")  void valueset_audit_event_sub_type() throws Exception { assertEqual("valueset-audit-event-sub-type.json"); }
    @Test @Tag("multi")  void valueset_audit_event_type() throws Exception { assertEqual("valueset-audit-event-type.json"); }
    @Test  void valueset_audit_source_type() throws Exception { assertEqual("valueset-audit-source-type.json"); }
    @Test  void valueset_basic_resource_type() throws Exception { assertEqual("valueset-basic-resource-type.json"); }
    @Test  void valueset_benefit_network() throws Exception { assertEqual("valueset-benefit-network.json"); }
    @Test  void valueset_benefit_term() throws Exception { assertEqual("valueset-benefit-term.json"); }
    @Test  void valueset_benefit_type() throws Exception { assertEqual("valueset-benefit-type.json"); }
    @Test  void valueset_benefit_unit() throws Exception { assertEqual("valueset-benefit-unit.json"); }
    @Test  void valueset_binding_strength() throws Exception { assertEqual("valueset-binding-strength.json"); }
    @Test  void valueset_body_site() throws Exception { assertEqual("valueset-body-site.json"); }
    @Test  void valueset_bodysite_laterality() throws Exception { assertEqual("valueset-bodysite-laterality.json"); }
    @Test  void valueset_bodystructure_code() throws Exception { assertEqual("valueset-bodystructure-code.json"); }
    @Test @Tag("multi")  void valueset_bodystructure_relative_location() throws Exception { assertEqual("valueset-bodystructure-relative-location.json"); }
    @Test  void valueset_bundle_type() throws Exception { assertEqual("valueset-bundle-type.json"); }
    @Test @Tag("multi")  void valueset_c80_doc_typecodes() throws Exception { assertEqual("valueset-c80-doc-typecodes.json"); }
    @Test @Tag("multi")  void valueset_c80_facilitycodes() throws Exception { assertEqual("valueset-c80-facilitycodes.json"); }
    @Test @Tag("multi")  void valueset_c80_practice_codes() throws Exception { assertEqual("valueset-c80-practice-codes.json"); }
    @Test  void valueset_capability_statement_kind() throws Exception { assertEqual("valueset-capability-statement-kind.json"); }
    @Test  void valueset_care_plan_activity_kind() throws Exception { assertEqual("valueset-care-plan-activity-kind.json"); }
    @Test  void valueset_care_plan_activity_outcome() throws Exception { assertEqual("valueset-care-plan-activity-outcome.json"); }
    @Test  void valueset_care_plan_activity_status() throws Exception { assertEqual("valueset-care-plan-activity-status.json"); }
    @Test  void valueset_care_plan_category() throws Exception { assertEqual("valueset-care-plan-category.json"); }
    @Test  void valueset_care_plan_intent() throws Exception { assertEqual("valueset-care-plan-intent.json"); }
    @Test  void valueset_care_team_category() throws Exception { assertEqual("valueset-care-team-category.json"); }
    @Test  void valueset_care_team_status() throws Exception { assertEqual("valueset-care-team-status.json"); }
    @Test  void valueset_catalogType() throws Exception { assertEqual("valueset-catalogType.json"); }
    @Test  void valueset_cdshooks_indicator() throws Exception { assertEqual("valueset-cdshooks-indicator.json"); }
    @Test  void valueset_certainty_subcomponent_rating() throws Exception { assertEqual("valueset-certainty-subcomponent-rating.json"); }
    @Test  void valueset_certainty_subcomponent_type() throws Exception { assertEqual("valueset-certainty-subcomponent-type.json"); }
    @Test  void valueset_chargeitem_billingcodes() throws Exception { assertEqual("valueset-chargeitem-billingcodes.json"); }
    @Test  void valueset_chargeitem_status() throws Exception { assertEqual("valueset-chargeitem-status.json"); }
    @Test  void valueset_choice_list_orientation() throws Exception { assertEqual("valueset-choice-list-orientation.json"); }
    @Test  void valueset_chromosome_human() throws Exception { assertEqual("valueset-chromosome-human.json"); }
    @Test  void valueset_claim_careteamrole() throws Exception { assertEqual("valueset-claim-careteamrole.json"); }
    @Test  void valueset_claim_exception() throws Exception { assertEqual("valueset-claim-exception.json"); }
    @Test  void valueset_claim_informationcategory() throws Exception { assertEqual("valueset-claim-informationcategory.json"); }
    @Test  void valueset_claim_modifiers() throws Exception { assertEqual("valueset-claim-modifiers.json"); }
    @Test  void valueset_claim_subtype() throws Exception { assertEqual("valueset-claim-subtype.json"); }
    @Test  void valueset_claim_type() throws Exception { assertEqual("valueset-claim-type.json"); }
    @Test  void valueset_claim_use() throws Exception { assertEqual("valueset-claim-use.json"); }
    @Test  void valueset_clinical_findings() throws Exception { assertEqual("valueset-clinical-findings.json"); }
    @Test  void valueset_clinicalimpression_prognosis() throws Exception { assertEqual("valueset-clinicalimpression-prognosis.json"); }
    @Test  void valueset_clinicalimpression_status() throws Exception { assertEqual("valueset-clinicalimpression-status.json"); }
    @Test  void valueset_clinvar() throws Exception { assertEqual("valueset-clinvar.json"); }
    @Test  void valueset_code_search_support() throws Exception { assertEqual("valueset-code-search-support.json"); }
    @Test  void valueset_codesystem_altcode_kind() throws Exception { assertEqual("valueset-codesystem-altcode-kind.json"); }
    @Test  void valueset_codesystem_content_mode() throws Exception { assertEqual("valueset-codesystem-content-mode.json"); }
    @Test  void valueset_codesystem_hierarchy_meaning() throws Exception { assertEqual("valueset-codesystem-hierarchy-meaning.json"); }
    @Test  void valueset_common_tags() throws Exception { assertEqual("valueset-common-tags.json"); }
    @Test  void valueset_communication_category() throws Exception { assertEqual("valueset-communication-category.json"); }
    @Test  void valueset_communication_not_done_reason() throws Exception { assertEqual("valueset-communication-not-done-reason.json"); }
    @Test  void valueset_communication_topic() throws Exception { assertEqual("valueset-communication-topic.json"); }
    @Test  void valueset_compartment_type() throws Exception { assertEqual("valueset-compartment-type.json"); }
    @Test  void valueset_composite_measure_scoring() throws Exception { assertEqual("valueset-composite-measure-scoring.json"); }
    @Test  void valueset_composition_altcode_kind() throws Exception { assertEqual("valueset-composition-altcode-kind.json"); }
    @Test  void valueset_composition_attestation_mode() throws Exception { assertEqual("valueset-composition-attestation-mode.json"); }
    @Test  void valueset_composition_status() throws Exception { assertEqual("valueset-composition-status.json"); }
    @Test  void valueset_concept_map_equivalence() throws Exception { assertEqual("valueset-concept-map-equivalence.json"); }
    @Test  void valueset_concept_property_type() throws Exception { assertEqual("valueset-concept-property-type.json"); }
    @Test  void valueset_concept_subsumption_outcome() throws Exception { assertEqual("valueset-concept-subsumption-outcome.json"); }
    @Test  void valueset_conceptmap_unmapped_mode() throws Exception { assertEqual("valueset-conceptmap-unmapped-mode.json"); }
    @Test  void valueset_condition_category() throws Exception { assertEqual("valueset-condition-category.json"); }
    @Test  void valueset_condition_cause() throws Exception { assertEqual("valueset-condition-cause.json"); }
    @Test  void valueset_condition_clinical() throws Exception { assertEqual("valueset-condition-clinical.json"); }
    @Test  void valueset_condition_code() throws Exception { assertEqual("valueset-condition-code.json"); }
    @Test  void valueset_condition_outcome() throws Exception { assertEqual("valueset-condition-outcome.json"); }
    @Test  void valueset_condition_predecessor() throws Exception { assertEqual("valueset-condition-predecessor.json"); }
    @Test  void valueset_condition_severity() throws Exception { assertEqual("valueset-condition-severity.json"); }
    @Test  void valueset_condition_stage_type() throws Exception { assertEqual("valueset-condition-stage-type.json"); }
    @Test  void valueset_condition_stage() throws Exception { assertEqual("valueset-condition-stage.json"); }
    @Test  void valueset_condition_state() throws Exception { assertEqual("valueset-condition-state.json"); }
    @Test  void valueset_condition_ver_status() throws Exception { assertEqual("valueset-condition-ver-status.json"); }
    @Test  void valueset_conditional_delete_status() throws Exception { assertEqual("valueset-conditional-delete-status.json"); }
    @Test  void valueset_conditional_read_status() throws Exception { assertEqual("valueset-conditional-read-status.json"); }
    @Test  void valueset_conformance_expectation() throws Exception { assertEqual("valueset-conformance-expectation.json"); }
    @Test  void valueset_consent_action() throws Exception { assertEqual("valueset-consent-action.json"); }
    @Test  void valueset_consent_category() throws Exception { assertEqual("valueset-consent-category.json"); }
    @Test  void valueset_consent_content_class() throws Exception { assertEqual("valueset-consent-content-class.json"); }
    @Test  void valueset_consent_content_code() throws Exception { assertEqual("valueset-consent-content-code.json"); }
    @Test  void valueset_consent_data_meaning() throws Exception { assertEqual("valueset-consent-data-meaning.json"); }
    @Test  void valueset_consent_performer() throws Exception { assertEqual("valueset-consent-performer.json"); }
    @Test  void valueset_consent_policy() throws Exception { assertEqual("valueset-consent-policy.json"); }
    @Test  void valueset_consent_provision_type() throws Exception { assertEqual("valueset-consent-provision-type.json"); }
    @Test  void valueset_consent_scope() throws Exception { assertEqual("valueset-consent-scope.json"); }
    @Test  void valueset_consent_state_codes() throws Exception { assertEqual("valueset-consent-state-codes.json"); }
    @Test  void valueset_consistency_type() throws Exception { assertEqual("valueset-consistency-type.json"); }
    @Test  void valueset_constraint_severity() throws Exception { assertEqual("valueset-constraint-severity.json"); }
    @Test  void valueset_contact_point_system() throws Exception { assertEqual("valueset-contact-point-system.json"); }
    @Test  void valueset_contact_point_use() throws Exception { assertEqual("valueset-contact-point-use.json"); }
    @Test  void valueset_contactentity_type() throws Exception { assertEqual("valueset-contactentity-type.json"); }
    @Test  void valueset_container_cap() throws Exception { assertEqual("valueset-container-cap.json"); }
    @Test  void valueset_container_material() throws Exception { assertEqual("valueset-container-material.json"); }
    @Test  void valueset_contract_action() throws Exception { assertEqual("valueset-contract-action.json"); }
    @Test  void valueset_contract_actionstatus() throws Exception { assertEqual("valueset-contract-actionstatus.json"); }
    @Test  void valueset_contract_actorrole() throws Exception { assertEqual("valueset-contract-actorrole.json"); }
    @Test  void valueset_contract_assetcontext() throws Exception { assertEqual("valueset-contract-assetcontext.json"); }
    @Test  void valueset_contract_assetscope() throws Exception { assertEqual("valueset-contract-assetscope.json"); }
    @Test  void valueset_contract_assetsubtype() throws Exception { assertEqual("valueset-contract-assetsubtype.json"); }
    @Test  void valueset_contract_assettype() throws Exception { assertEqual("valueset-contract-assettype.json"); }
    @Test  void valueset_contract_content_derivative() throws Exception { assertEqual("valueset-contract-content-derivative.json"); }
    @Test  void valueset_contract_data_meaning() throws Exception { assertEqual("valueset-contract-data-meaning.json"); }
    @Test  void valueset_contract_decision_mode() throws Exception { assertEqual("valueset-contract-decision-mode.json"); }
    @Test  void valueset_contract_definition_subtype() throws Exception { assertEqual("valueset-contract-definition-subtype.json"); }
    @Test  void valueset_contract_definition_type() throws Exception { assertEqual("valueset-contract-definition-type.json"); }
    @Test  void valueset_contract_expiration_type() throws Exception { assertEqual("valueset-contract-expiration-type.json"); }
    @Test  void valueset_contract_legalstate() throws Exception { assertEqual("valueset-contract-legalstate.json"); }
    @Test  void valueset_contract_party_role() throws Exception { assertEqual("valueset-contract-party-role.json"); }
    @Test  void valueset_contract_publicationstatus() throws Exception { assertEqual("valueset-contract-publicationstatus.json"); }
    @Test  void valueset_contract_scope() throws Exception { assertEqual("valueset-contract-scope.json"); }
    @Test  void valueset_contract_security_category() throws Exception { assertEqual("valueset-contract-security-category.json"); }
    @Test  void valueset_contract_security_classification() throws Exception { assertEqual("valueset-contract-security-classification.json"); }
    @Test  void valueset_contract_security_control() throws Exception { assertEqual("valueset-contract-security-control.json"); }
    @Test  void valueset_contract_signer_type() throws Exception { assertEqual("valueset-contract-signer-type.json"); }
    @Test  void valueset_contract_status() throws Exception { assertEqual("valueset-contract-status.json"); }
    @Test  void valueset_contract_subtype() throws Exception { assertEqual("valueset-contract-subtype.json"); }
    @Test  void valueset_contract_term_subtype() throws Exception { assertEqual("valueset-contract-term-subtype.json"); }
    @Test  void valueset_contract_term_type() throws Exception { assertEqual("valueset-contract-term-type.json"); }
    @Test  void valueset_contract_type() throws Exception { assertEqual("valueset-contract-type.json"); }
    @Test  void valueset_contributor_type() throws Exception { assertEqual("valueset-contributor-type.json"); }
    @Test  void valueset_copy_number_event() throws Exception { assertEqual("valueset-copy-number-event.json"); }
    @Test  void valueset_cosmic() throws Exception { assertEqual("valueset-cosmic.json"); }
    @Test  void valueset_coverage_class() throws Exception { assertEqual("valueset-coverage-class.json"); }
    @Test  void valueset_coverage_copay_type() throws Exception { assertEqual("valueset-coverage-copay-type.json"); }
    @Test  void valueset_coverage_financial_exception() throws Exception { assertEqual("valueset-coverage-financial-exception.json"); }
    @Test  void valueset_coverage_selfpay() throws Exception { assertEqual("valueset-coverage-selfpay.json"); }
    @Test  void valueset_coverage_type() throws Exception { assertEqual("valueset-coverage-type.json"); }
    @Test  void valueset_coverageeligibilityresponse_ex_auth_support() throws Exception { assertEqual("valueset-coverageeligibilityresponse-ex-auth-support.json"); }
    @Test  void valueset_cpt_all() throws Exception { assertEqual("valueset-cpt-all.json"); }
    @Test  void valueset_currencies() throws Exception { assertEqual("valueset-currencies.json"); }
    @Test  void valueset_data_absent_reason() throws Exception { assertEqual("valueset-data-absent-reason.json"); }
    @Test  void valueset_data_types() throws Exception { assertEqual("valueset-data-types.json"); }
    @Test  void valueset_dataelement_sdcobjectclass() throws Exception { assertEqual("valueset-dataelement-sdcobjectclass.json"); }
    @Test  void valueset_dataelement_sdcobjectclassproperty() throws Exception { assertEqual("valueset-dataelement-sdcobjectclassproperty.json"); }
    @Test  void valueset_days_of_week() throws Exception { assertEqual("valueset-days-of-week.json"); }
    @Test  void valueset_dbsnp() throws Exception { assertEqual("valueset-dbsnp.json"); }
    @Test  void valueset_defined_types() throws Exception { assertEqual("valueset-defined-types.json"); }
    @Test  void valueset_definition_resource_types() throws Exception { assertEqual("valueset-definition-resource-types.json"); }
    @Test  void valueset_definition_status() throws Exception { assertEqual("valueset-definition-status.json"); }
    @Test  void valueset_definition_topic() throws Exception { assertEqual("valueset-definition-topic.json"); }
    @Test  void valueset_definition_use() throws Exception { assertEqual("valueset-definition-use.json"); }
    @Test  void valueset_designation_use() throws Exception { assertEqual("valueset-designation-use.json"); }
    @Test  void valueset_detectedissue_category() throws Exception { assertEqual("valueset-detectedissue-category.json"); }
    @Test  void valueset_detectedissue_mitigation_action() throws Exception { assertEqual("valueset-detectedissue-mitigation-action.json"); }
    @Test  void valueset_detectedissue_severity() throws Exception { assertEqual("valueset-detectedissue-severity.json"); }
    @Test  void valueset_device_action() throws Exception { assertEqual("valueset-device-action.json"); }
    @Test @Tag("multi")  void valueset_device_component_property() throws Exception { assertEqual("valueset-device-component-property.json"); }
    @Test  void valueset_device_definition_status() throws Exception { assertEqual("valueset-device-definition-status.json"); }
    @Test  void valueset_device_kind() throws Exception { assertEqual("valueset-device-kind.json"); }
    @Test  void valueset_device_nametype() throws Exception { assertEqual("valueset-device-nametype.json"); }
    @Test  void valueset_device_safety() throws Exception { assertEqual("valueset-device-safety.json"); }
    @Test  void valueset_device_statement_status() throws Exception { assertEqual("valueset-device-statement-status.json"); }
    @Test  void valueset_device_status_reason() throws Exception { assertEqual("valueset-device-status-reason.json"); }
    @Test  void valueset_device_status() throws Exception { assertEqual("valueset-device-status.json"); }
    @Test  void valueset_device_type() throws Exception { assertEqual("valueset-device-type.json"); }
    @Test  void valueset_devicemetric_type() throws Exception { assertEqual("valueset-devicemetric-type.json"); }
    @Test  void valueset_diagnosis_role() throws Exception { assertEqual("valueset-diagnosis-role.json"); }
    @Test  void valueset_diagnostic_based_on_snomed() throws Exception { assertEqual("valueset-diagnostic-based-on-snomed.json"); }
    @Test  void valueset_diagnostic_report_status() throws Exception { assertEqual("valueset-diagnostic-report-status.json"); }
    @Test  void valueset_diagnostic_service_sections() throws Exception { assertEqual("valueset-diagnostic-service-sections.json"); }
    @Test @Tag("multi")  void valueset_dicm_405_mediatype() throws Exception { assertEqual("valueset-dicm-405-mediatype.json"); }
    @Test  void valueset_diet_type() throws Exception { assertEqual("valueset-diet-type.json"); }
    @Test  void valueset_discriminator_type() throws Exception { assertEqual("valueset-discriminator-type.json"); }
    @Test  void valueset_distance_units() throws Exception { assertEqual("valueset-distance-units.json"); }
    @Test @Tag("multi")  void valueset_doc_section_codes() throws Exception { assertEqual("valueset-doc-section-codes.json"); }
    @Test  void valueset_doc_typecodes() throws Exception { assertEqual("valueset-doc-typecodes.json"); }
    @Test @Tag("multi")  void valueset_document_classcodes() throws Exception { assertEqual("valueset-document-classcodes.json"); }
    @Test  void valueset_document_mode() throws Exception { assertEqual("valueset-document-mode.json"); }
    @Test  void valueset_document_reference_status() throws Exception { assertEqual("valueset-document-reference-status.json"); }
    @Test  void valueset_document_relationship_type() throws Exception { assertEqual("valueset-document-relationship-type.json"); }
    @Test  void valueset_dose_rate_type() throws Exception { assertEqual("valueset-dose-rate-type.json"); }
    @Test  void valueset_duration_units() throws Exception { assertEqual("valueset-duration-units.json"); }
    @Test  void valueset_effect_estimate_type() throws Exception { assertEqual("valueset-effect-estimate-type.json"); }
    @Test  void valueset_eligibilityrequest_purpose() throws Exception { assertEqual("valueset-eligibilityrequest-purpose.json"); }
    @Test  void valueset_eligibilityresponse_purpose() throws Exception { assertEqual("valueset-eligibilityresponse-purpose.json"); }
    @Test  void valueset_encounter_admit_source() throws Exception { assertEqual("valueset-encounter-admit-source.json"); }
    @Test  void valueset_encounter_diet() throws Exception { assertEqual("valueset-encounter-diet.json"); }
    @Test  void valueset_encounter_discharge_disposition() throws Exception { assertEqual("valueset-encounter-discharge-disposition.json"); }
    @Test  void valueset_encounter_location_status() throws Exception { assertEqual("valueset-encounter-location-status.json"); }
    @Test  void valueset_encounter_participant_type() throws Exception { assertEqual("valueset-encounter-participant-type.json"); }
    @Test  void valueset_encounter_reason() throws Exception { assertEqual("valueset-encounter-reason.json"); }
    @Test  void valueset_encounter_special_arrangements() throws Exception { assertEqual("valueset-encounter-special-arrangements.json"); }
    @Test  void valueset_encounter_special_courtesy() throws Exception { assertEqual("valueset-encounter-special-courtesy.json"); }
    @Test  void valueset_encounter_status() throws Exception { assertEqual("valueset-encounter-status.json"); }
    @Test  void valueset_encounter_type() throws Exception { assertEqual("valueset-encounter-type.json"); }
    @Test  void valueset_endpoint_connection_type() throws Exception { assertEqual("valueset-endpoint-connection-type.json"); }
    @Test @Tag("multi")  void valueset_endpoint_payload_type() throws Exception { assertEqual("valueset-endpoint-payload-type.json"); }
    @Test  void valueset_endpoint_status() throws Exception { assertEqual("valueset-endpoint-status.json"); }
    @Test  void valueset_ensembl() throws Exception { assertEqual("valueset-ensembl.json"); }
    @Test @Tag("multi")  void valueset_enteral_route() throws Exception { assertEqual("valueset-enteral-route.json"); }
    @Test  void valueset_entformula_additive() throws Exception { assertEqual("valueset-entformula-additive.json"); }
    @Test @Tag("multi")  void valueset_entformula_type() throws Exception { assertEqual("valueset-entformula-type.json"); }
    @Test  void valueset_episode_of_care_status() throws Exception { assertEqual("valueset-episode-of-care-status.json"); }
    @Test  void valueset_episodeofcare_type() throws Exception { assertEqual("valueset-episodeofcare-type.json"); }
    @Test  void valueset_event_capability_mode() throws Exception { assertEqual("valueset-event-capability-mode.json"); }
    @Test  void valueset_event_or_request_resource_types() throws Exception { assertEqual("valueset-event-or-request-resource-types.json"); }
    @Test  void valueset_event_resource_types() throws Exception { assertEqual("valueset-event-resource-types.json"); }
    @Test  void valueset_event_status() throws Exception { assertEqual("valueset-event-status.json"); }
    @Test @Tag("multi")  void valueset_event_timing() throws Exception { assertEqual("valueset-event-timing.json"); }
    @Test  void valueset_evidence_quality() throws Exception { assertEqual("valueset-evidence-quality.json"); }
    @Test  void valueset_evidence_variant_state() throws Exception { assertEqual("valueset-evidence-variant-state.json"); }
    @Test  void valueset_ex_benefitcategory() throws Exception { assertEqual("valueset-ex-benefitcategory.json"); }
    @Test  void valueset_ex_diagnosis_on_admission() throws Exception { assertEqual("valueset-ex-diagnosis-on-admission.json"); }
    @Test  void valueset_ex_diagnosisrelatedgroup() throws Exception { assertEqual("valueset-ex-diagnosisrelatedgroup.json"); }
    @Test  void valueset_ex_diagnosistype() throws Exception { assertEqual("valueset-ex-diagnosistype.json"); }
    @Test  void valueset_ex_onsettype() throws Exception { assertEqual("valueset-ex-onsettype.json"); }
    @Test  void valueset_ex_payee_resource_type() throws Exception { assertEqual("valueset-ex-payee-resource-type.json"); }
    @Test  void valueset_ex_paymenttype() throws Exception { assertEqual("valueset-ex-paymenttype.json"); }
    @Test  void valueset_ex_procedure_type() throws Exception { assertEqual("valueset-ex-procedure-type.json"); }
    @Test  void valueset_ex_program_code() throws Exception { assertEqual("valueset-ex-program-code.json"); }
    @Test  void valueset_ex_revenue_center() throws Exception { assertEqual("valueset-ex-revenue-center.json"); }
    @Test  void valueset_example_expansion() throws Exception { assertEqual("valueset-example-expansion.json"); }
    @Test  void valueset_example_filter() throws Exception { assertEqual("valueset-example-filter.json"); }
    @Test @Tag("multi")  void valueset_example_hierarchical() throws Exception { assertEqual("valueset-example-hierarchical.json"); }
    @Test  void valueset_example_inactive() throws Exception { assertEqual("valueset-example-inactive.json"); }
    @Test  void valueset_example_intensional() throws Exception { assertEqual("valueset-example-intensional.json"); }
    @Test  void valueset_example_yesnodontknow() throws Exception { assertEqual("valueset-example-yesnodontknow.json"); }
    @Test  void valueset_example() throws Exception { assertEqual("valueset-example.json"); }
    @Test  void valueset_examplescenario_actor_type() throws Exception { assertEqual("valueset-examplescenario-actor-type.json"); }
    @Test  void valueset_expansion_parameter_source() throws Exception { assertEqual("valueset-expansion-parameter-source.json"); }
    @Test  void valueset_expansion_processing_rule() throws Exception { assertEqual("valueset-expansion-processing-rule.json"); }
    @Test  void valueset_explanationofbenefit_status() throws Exception { assertEqual("valueset-explanationofbenefit-status.json"); }
    @Test  void valueset_exposure_state() throws Exception { assertEqual("valueset-exposure-state.json"); }
    @Test  void valueset_expression_language() throws Exception { assertEqual("valueset-expression-language.json"); }
    @Test  void valueset_extension_context_type() throws Exception { assertEqual("valueset-extension-context-type.json"); }
    @Test  void valueset_extensions_ValueSet_author() throws Exception { assertEqual("valueset-extensions-ValueSet-author.json"); }
    @Test  void valueset_extensions_ValueSet_effective() throws Exception { assertEqual("valueset-extensions-ValueSet-effective.json"); }
    @Test  void valueset_extensions_ValueSet_end() throws Exception { assertEqual("valueset-extensions-ValueSet-end.json"); }
    @Test  void valueset_extensions_ValueSet_keyword() throws Exception { assertEqual("valueset-extensions-ValueSet-keyword.json"); }
    @Test  void valueset_extensions_ValueSet_workflow() throws Exception { assertEqual("valueset-extensions-ValueSet-workflow.json"); }
    @Test  void valueset_feeding_device() throws Exception { assertEqual("valueset-feeding-device.json"); }
    @Test  void valueset_filter_operator() throws Exception { assertEqual("valueset-filter-operator.json"); }
    @Test  void valueset_financial_taskcode() throws Exception { assertEqual("valueset-financial-taskcode.json"); }
    @Test  void valueset_financial_taskinputtype() throws Exception { assertEqual("valueset-financial-taskinputtype.json"); }
    @Test  void valueset_flag_category() throws Exception { assertEqual("valueset-flag-category.json"); }
    @Test  void valueset_flag_code() throws Exception { assertEqual("valueset-flag-code.json"); }
    @Test  void valueset_flag_priority() throws Exception { assertEqual("valueset-flag-priority.json"); }
    @Test  void valueset_flag_status() throws Exception { assertEqual("valueset-flag-status.json"); }
    @Test  void valueset_fm_conditions() throws Exception { assertEqual("valueset-fm-conditions.json"); }
    @Test  void valueset_fm_itemtype() throws Exception { assertEqual("valueset-fm-itemtype.json"); }
    @Test  void valueset_fm_status() throws Exception { assertEqual("valueset-fm-status.json"); }
    @Test  void valueset_focal_subject() throws Exception { assertEqual("valueset-focal-subject.json"); }
    @Test  void valueset_food_type() throws Exception { assertEqual("valueset-food-type.json"); }
    @Test  void valueset_formatcodes() throws Exception { assertEqual("valueset-formatcodes.json"); }
    @Test  void valueset_forms() throws Exception { assertEqual("valueset-forms.json"); }
    @Test  void valueset_fundsreserve() throws Exception { assertEqual("valueset-fundsreserve.json"); }
    @Test  void valueset_gender_identity() throws Exception { assertEqual("valueset-gender-identity.json"); }
    @Test  void valueset_genenames() throws Exception { assertEqual("valueset-genenames.json"); }
    @Test  void valueset_goal_acceptance_status() throws Exception { assertEqual("valueset-goal-acceptance-status.json"); }
    @Test  void valueset_goal_achievement() throws Exception { assertEqual("valueset-goal-achievement.json"); }
    @Test  void valueset_goal_category() throws Exception { assertEqual("valueset-goal-category.json"); }
    @Test  void valueset_goal_priority() throws Exception { assertEqual("valueset-goal-priority.json"); }
    @Test  void valueset_goal_relationship_type() throws Exception { assertEqual("valueset-goal-relationship-type.json"); }
    @Test  void valueset_goal_start_event() throws Exception { assertEqual("valueset-goal-start-event.json"); }
    @Test  void valueset_goal_status_reason() throws Exception { assertEqual("valueset-goal-status-reason.json"); }
    @Test  void valueset_goal_status() throws Exception { assertEqual("valueset-goal-status.json"); }
    @Test  void valueset_graph_compartment_rule() throws Exception { assertEqual("valueset-graph-compartment-rule.json"); }
    @Test  void valueset_graph_compartment_use() throws Exception { assertEqual("valueset-graph-compartment-use.json"); }
    @Test  void valueset_group_measure() throws Exception { assertEqual("valueset-group-measure.json"); }
    @Test  void valueset_group_type() throws Exception { assertEqual("valueset-group-type.json"); }
    @Test  void valueset_guidance_response_status() throws Exception { assertEqual("valueset-guidance-response-status.json"); }
    @Test  void valueset_guide_page_generation() throws Exception { assertEqual("valueset-guide-page-generation.json"); }
    @Test  void valueset_guide_parameter_code() throws Exception { assertEqual("valueset-guide-parameter-code.json"); }
    @Test  void valueset_handling_condition() throws Exception { assertEqual("valueset-handling-condition.json"); }
    @Test  void valueset_history_absent_reason() throws Exception { assertEqual("valueset-history-absent-reason.json"); }
    @Test  void valueset_history_status() throws Exception { assertEqual("valueset-history-status.json"); }
    @Test  void valueset_hl7_work_group() throws Exception { assertEqual("valueset-hl7-work-group.json"); }
    @Test  void valueset_http_operations() throws Exception { assertEqual("valueset-http-operations.json"); }
    @Test  void valueset_http_verb() throws Exception { assertEqual("valueset-http-verb.json"); }
    @Test  void valueset_icd_10_procedures() throws Exception { assertEqual("valueset-icd-10-procedures.json"); }
    @Test  void valueset_icd_10() throws Exception { assertEqual("valueset-icd-10.json"); }
    @Test @Tag("multi")  void valueset_identifier_type() throws Exception { assertEqual("valueset-identifier-type.json"); }
    @Test  void valueset_identifier_use() throws Exception { assertEqual("valueset-identifier-use.json"); }
    @Test  void valueset_identity_assuranceLevel() throws Exception { assertEqual("valueset-identity-assuranceLevel.json"); }
    @Test  void valueset_imagingstudy_status() throws Exception { assertEqual("valueset-imagingstudy-status.json"); }
    @Test  void valueset_immunization_evaluation_dose_status_reason() throws Exception { assertEqual("valueset-immunization-evaluation-dose-status-reason.json"); }
    @Test  void valueset_immunization_evaluation_dose_status() throws Exception { assertEqual("valueset-immunization-evaluation-dose-status.json"); }
    @Test  void valueset_immunization_evaluation_status() throws Exception { assertEqual("valueset-immunization-evaluation-status.json"); }
    @Test @Tag("multi")  void valueset_immunization_evaluation_target_disease() throws Exception { assertEqual("valueset-immunization-evaluation-target-disease.json"); }
    @Test  void valueset_immunization_function() throws Exception { assertEqual("valueset-immunization-function.json"); }
    @Test  void valueset_immunization_funding_source() throws Exception { assertEqual("valueset-immunization-funding-source.json"); }
    @Test  void valueset_immunization_origin() throws Exception { assertEqual("valueset-immunization-origin.json"); }
    @Test  void valueset_immunization_program_eligibility() throws Exception { assertEqual("valueset-immunization-program-eligibility.json"); }
    @Test  void valueset_immunization_reason() throws Exception { assertEqual("valueset-immunization-reason.json"); }
    @Test  void valueset_immunization_recommendation_date_criterion() throws Exception { assertEqual("valueset-immunization-recommendation-date-criterion.json"); }
    @Test  void valueset_immunization_recommendation_reason() throws Exception { assertEqual("valueset-immunization-recommendation-reason.json"); }
    @Test  void valueset_immunization_recommendation_status() throws Exception { assertEqual("valueset-immunization-recommendation-status.json"); }
    @Test @Tag("multi")  void valueset_immunization_recommendation_target_disease() throws Exception { assertEqual("valueset-immunization-recommendation-target-disease.json"); }
    @Test  void valueset_immunization_route() throws Exception { assertEqual("valueset-immunization-route.json"); }
    @Test  void valueset_immunization_site() throws Exception { assertEqual("valueset-immunization-site.json"); }
    @Test  void valueset_immunization_status_reason() throws Exception { assertEqual("valueset-immunization-status-reason.json"); }
    @Test  void valueset_immunization_status() throws Exception { assertEqual("valueset-immunization-status.json"); }
    @Test  void valueset_immunization_subpotent_reason() throws Exception { assertEqual("valueset-immunization-subpotent-reason.json"); }
    @Test @Tag("multi")  void valueset_immunization_target_disease() throws Exception { assertEqual("valueset-immunization-target-disease.json"); }
    @Test  void valueset_implantStatus() throws Exception { assertEqual("valueset-implantStatus.json"); }
    @Test  void valueset_instance_availability() throws Exception { assertEqual("valueset-instance-availability.json"); }
    @Test  void valueset_insuranceplan_applicability() throws Exception { assertEqual("valueset-insuranceplan-applicability.json"); }
    @Test  void valueset_insuranceplan_type() throws Exception { assertEqual("valueset-insuranceplan-type.json"); }
    @Test  void valueset_intervention() throws Exception { assertEqual("valueset-intervention.json"); }
    @Test  void valueset_investigation_sets() throws Exception { assertEqual("valueset-investigation-sets.json"); }
    @Test  void valueset_invoice_priceComponentType() throws Exception { assertEqual("valueset-invoice-priceComponentType.json"); }
    @Test  void valueset_invoice_status() throws Exception { assertEqual("valueset-invoice-status.json"); }
    @Test @Tag("multi")  void valueset_iso3166_1_2() throws Exception { assertEqual("valueset-iso3166-1-2.json"); }
    @Test  void valueset_iso3166_1_3() throws Exception { assertEqual("valueset-iso3166-1-3.json"); }
    @Test  void valueset_iso3166_1_N() throws Exception { assertEqual("valueset-iso3166-1-N.json"); }
    @Test  void valueset_issue_severity() throws Exception { assertEqual("valueset-issue-severity.json"); }
    @Test  void valueset_issue_type() throws Exception { assertEqual("valueset-issue-type.json"); }
    @Test  void valueset_item_type() throws Exception { assertEqual("valueset-item-type.json"); }
    @Test  void valueset_jurisdiction() throws Exception { assertEqual("valueset-jurisdiction.json"); }
    @Test  void valueset_knowledge_resource_types() throws Exception { assertEqual("valueset-knowledge-resource-types.json"); }
    @Test  void valueset_language_preference_type() throws Exception { assertEqual("valueset-language-preference-type.json"); }
    @Test @Tag("multi")  void valueset_languages() throws Exception { assertEqual("valueset-languages.json"); }
    @Test  void valueset_ldlcholesterol_codes() throws Exception { assertEqual("valueset-ldlcholesterol-codes.json"); }
    @Test  void valueset_library_type() throws Exception { assertEqual("valueset-library-type.json"); }
    @Test  void valueset_link_type() throws Exception { assertEqual("valueset-link-type.json"); }
    @Test  void valueset_linkage_type() throws Exception { assertEqual("valueset-linkage-type.json"); }
    @Test  void valueset_list_empty_reason() throws Exception { assertEqual("valueset-list-empty-reason.json"); }
    @Test  void valueset_list_example_codes() throws Exception { assertEqual("valueset-list-example-codes.json"); }
    @Test  void valueset_list_item_flag() throws Exception { assertEqual("valueset-list-item-flag.json"); }
    @Test  void valueset_list_mode() throws Exception { assertEqual("valueset-list-mode.json"); }
    @Test  void valueset_list_order() throws Exception { assertEqual("valueset-list-order.json"); }
    @Test  void valueset_list_status() throws Exception { assertEqual("valueset-list-status.json"); }
    @Test  void valueset_location_mode() throws Exception { assertEqual("valueset-location-mode.json"); }
    @Test  void valueset_location_physical_type() throws Exception { assertEqual("valueset-location-physical-type.json"); }
    @Test  void valueset_location_status() throws Exception { assertEqual("valueset-location-status.json"); }
    @Test  void valueset_manifestation_or_symptom() throws Exception { assertEqual("valueset-manifestation-or-symptom.json"); }
    @Test  void valueset_map_context_type() throws Exception { assertEqual("valueset-map-context-type.json"); }
    @Test  void valueset_map_group_type_mode() throws Exception { assertEqual("valueset-map-group-type-mode.json"); }
    @Test  void valueset_map_input_mode() throws Exception { assertEqual("valueset-map-input-mode.json"); }
    @Test  void valueset_map_model_mode() throws Exception { assertEqual("valueset-map-model-mode.json"); }
    @Test  void valueset_map_source_list_mode() throws Exception { assertEqual("valueset-map-source-list-mode.json"); }
    @Test  void valueset_map_target_list_mode() throws Exception { assertEqual("valueset-map-target-list-mode.json"); }
    @Test  void valueset_map_transform() throws Exception { assertEqual("valueset-map-transform.json"); }
    @Test  void valueset_marital_status() throws Exception { assertEqual("valueset-marital-status.json"); }
    @Test  void valueset_match_grade() throws Exception { assertEqual("valueset-match-grade.json"); }
    @Test  void valueset_measure_data_usage() throws Exception { assertEqual("valueset-measure-data-usage.json"); }
    @Test  void valueset_measure_improvement_notation() throws Exception { assertEqual("valueset-measure-improvement-notation.json"); }
    @Test  void valueset_measure_population() throws Exception { assertEqual("valueset-measure-population.json"); }
    @Test  void valueset_measure_report_status() throws Exception { assertEqual("valueset-measure-report-status.json"); }
    @Test  void valueset_measure_report_type() throws Exception { assertEqual("valueset-measure-report-type.json"); }
    @Test  void valueset_measure_scoring() throws Exception { assertEqual("valueset-measure-scoring.json"); }
    @Test  void valueset_measure_type() throws Exception { assertEqual("valueset-measure-type.json"); }
    @Test  void valueset_med_admin_perform_function() throws Exception { assertEqual("valueset-med-admin-perform-function.json"); }
    @Test  void valueset_media_modality() throws Exception { assertEqual("valueset-media-modality.json"); }
    @Test  void valueset_media_type() throws Exception { assertEqual("valueset-media-type.json"); }
    @Test  void valueset_media_view() throws Exception { assertEqual("valueset-media-view.json"); }
    @Test  void valueset_medication_admin_category() throws Exception { assertEqual("valueset-medication-admin-category.json"); }
    @Test  void valueset_medication_admin_status() throws Exception { assertEqual("valueset-medication-admin-status.json"); }
    @Test  void valueset_medication_as_needed_reason() throws Exception { assertEqual("valueset-medication-as-needed-reason.json"); }
    @Test  void valueset_medication_codes() throws Exception { assertEqual("valueset-medication-codes.json"); }
    @Test  void valueset_medication_form_codes() throws Exception { assertEqual("valueset-medication-form-codes.json"); }
    @Test  void valueset_medication_statement_category() throws Exception { assertEqual("valueset-medication-statement-category.json"); }
    @Test  void valueset_medication_statement_status() throws Exception { assertEqual("valueset-medication-statement-status.json"); }
    @Test  void valueset_medication_status() throws Exception { assertEqual("valueset-medication-status.json"); }
    @Test  void valueset_medicationdispense_category() throws Exception { assertEqual("valueset-medicationdispense-category.json"); }
    @Test  void valueset_medicationdispense_performer_function() throws Exception { assertEqual("valueset-medicationdispense-performer-function.json"); }
    @Test  void valueset_medicationdispense_status_reason() throws Exception { assertEqual("valueset-medicationdispense-status-reason.json"); }
    @Test  void valueset_medicationdispense_status() throws Exception { assertEqual("valueset-medicationdispense-status.json"); }
    @Test  void valueset_medicationknowledge_characteristic() throws Exception { assertEqual("valueset-medicationknowledge-characteristic.json"); }
    @Test  void valueset_medicationknowledge_package_type() throws Exception { assertEqual("valueset-medicationknowledge-package-type.json"); }
    @Test  void valueset_medicationknowledge_status() throws Exception { assertEqual("valueset-medicationknowledge-status.json"); }
    @Test  void valueset_medicationrequest_category() throws Exception { assertEqual("valueset-medicationrequest-category.json"); }
    @Test  void valueset_medicationrequest_course_of_therapy() throws Exception { assertEqual("valueset-medicationrequest-course-of-therapy.json"); }
    @Test  void valueset_medicationrequest_intent() throws Exception { assertEqual("valueset-medicationrequest-intent.json"); }
    @Test  void valueset_medicationrequest_status_reason() throws Exception { assertEqual("valueset-medicationrequest-status-reason.json"); }
    @Test  void valueset_medicationrequest_status() throws Exception { assertEqual("valueset-medicationrequest-status.json"); }
    @Test  void valueset_message_events() throws Exception { assertEqual("valueset-message-events.json"); }
    @Test  void valueset_message_reason_encounter() throws Exception { assertEqual("valueset-message-reason-encounter.json"); }
    @Test  void valueset_message_significance_category() throws Exception { assertEqual("valueset-message-significance-category.json"); }
    @Test  void valueset_message_transport() throws Exception { assertEqual("valueset-message-transport.json"); }
    @Test  void valueset_messageheader_response_request() throws Exception { assertEqual("valueset-messageheader-response-request.json"); }
    @Test  void valueset_metric_calibration_state() throws Exception { assertEqual("valueset-metric-calibration-state.json"); }
    @Test  void valueset_metric_calibration_type() throws Exception { assertEqual("valueset-metric-calibration-type.json"); }
    @Test  void valueset_metric_category() throws Exception { assertEqual("valueset-metric-category.json"); }
    @Test  void valueset_metric_color() throws Exception { assertEqual("valueset-metric-color.json"); }
    @Test  void valueset_metric_operational_status() throws Exception { assertEqual("valueset-metric-operational-status.json"); }
    @Test  void valueset_mimetypes() throws Exception { assertEqual("valueset-mimetypes.json"); }
    @Test  void valueset_missing_tooth_reason() throws Exception { assertEqual("valueset-missing-tooth-reason.json"); }
    @Test @Tag("multi")  void valueset_modified_foodtype() throws Exception { assertEqual("valueset-modified-foodtype.json"); }
    @Test  void valueset_name_assembly_order() throws Exception { assertEqual("valueset-name-assembly-order.json"); }
    @Test @Tag("multi")  void valueset_name_part_qualifier() throws Exception { assertEqual("valueset-name-part-qualifier.json"); }
    @Test  void valueset_name_use() throws Exception { assertEqual("valueset-name-use.json"); }
    @Test  void valueset_name_v3_representation() throws Exception { assertEqual("valueset-name-v3-representation.json"); }
    @Test  void valueset_namingsystem_identifier_type() throws Exception { assertEqual("valueset-namingsystem-identifier-type.json"); }
    @Test  void valueset_namingsystem_type() throws Exception { assertEqual("valueset-namingsystem-type.json"); }
    @Test  void valueset_narrative_status() throws Exception { assertEqual("valueset-narrative-status.json"); }
    @Test  void valueset_network_type() throws Exception { assertEqual("valueset-network-type.json"); }
    @Test @Tag("multi")  void valueset_nhin_purposeofuse() throws Exception { assertEqual("valueset-nhin-purposeofuse.json"); }
    @Test  void valueset_note_type() throws Exception { assertEqual("valueset-note-type.json"); }
    @Test  void valueset_nutrient_code() throws Exception { assertEqual("valueset-nutrient-code.json"); }
    @Test  void valueset_object_lifecycle_events() throws Exception { assertEqual("valueset-object-lifecycle-events.json"); }
    @Test  void valueset_object_role() throws Exception { assertEqual("valueset-object-role.json"); }
    @Test  void valueset_observation_category() throws Exception { assertEqual("valueset-observation-category.json"); }
    @Test  void valueset_observation_codes() throws Exception { assertEqual("valueset-observation-codes.json"); }
    @Test  void valueset_observation_interpretation() throws Exception { assertEqual("valueset-observation-interpretation.json"); }
    @Test  void valueset_observation_methods() throws Exception { assertEqual("valueset-observation-methods.json"); }
    @Test  void valueset_observation_range_category() throws Exception { assertEqual("valueset-observation-range-category.json"); }
    @Test  void valueset_observation_statistics() throws Exception { assertEqual("valueset-observation-statistics.json"); }
    @Test  void valueset_observation_status() throws Exception { assertEqual("valueset-observation-status.json"); }
    @Test @Tag("multi")  void valueset_observation_vitalsignresult() throws Exception { assertEqual("valueset-observation-vitalsignresult.json"); }
    @Test  void valueset_operation_kind() throws Exception { assertEqual("valueset-operation-kind.json"); }
    @Test  void valueset_operation_outcome() throws Exception { assertEqual("valueset-operation-outcome.json"); }
    @Test  void valueset_operation_parameter_use() throws Exception { assertEqual("valueset-operation-parameter-use.json"); }
    @Test  void valueset_oral_prosthodontic_material() throws Exception { assertEqual("valueset-oral-prosthodontic-material.json"); }
    @Test  void valueset_organization_role() throws Exception { assertEqual("valueset-organization-role.json"); }
    @Test  void valueset_organization_type() throws Exception { assertEqual("valueset-organization-type.json"); }
    @Test  void valueset_orientation_type() throws Exception { assertEqual("valueset-orientation-type.json"); }
    @Test  void valueset_parameter_group() throws Exception { assertEqual("valueset-parameter-group.json"); }
    @Test  void valueset_parent_relationship_codes() throws Exception { assertEqual("valueset-parent-relationship-codes.json"); }
    @Test  void valueset_participant_role() throws Exception { assertEqual("valueset-participant-role.json"); }
    @Test  void valueset_participantrequired() throws Exception { assertEqual("valueset-participantrequired.json"); }
    @Test @Tag("multi")  void valueset_participation_role_type() throws Exception { assertEqual("valueset-participation-role-type.json"); }
    @Test  void valueset_participationstatus() throws Exception { assertEqual("valueset-participationstatus.json"); }
    @Test  void valueset_patient_contactrelationship() throws Exception { assertEqual("valueset-patient-contactrelationship.json"); }
    @Test  void valueset_payeetype() throws Exception { assertEqual("valueset-payeetype.json"); }
    @Test  void valueset_payment_adjustment_reason() throws Exception { assertEqual("valueset-payment-adjustment-reason.json"); }
    @Test  void valueset_payment_status() throws Exception { assertEqual("valueset-payment-status.json"); }
    @Test  void valueset_payment_type() throws Exception { assertEqual("valueset-payment-type.json"); }
    @Test @Tag("multi")  void valueset_performer_function() throws Exception { assertEqual("valueset-performer-function.json"); }
    @Test  void valueset_performer_role() throws Exception { assertEqual("valueset-performer-role.json"); }
    @Test  void valueset_permitted_data_type() throws Exception { assertEqual("valueset-permitted-data-type.json"); }
    @Test  void valueset_plan_definition_type() throws Exception { assertEqual("valueset-plan-definition-type.json"); }
    @Test  void valueset_postal_address_use() throws Exception { assertEqual("valueset-postal-address-use.json"); }
    @Test  void valueset_practitioner_role() throws Exception { assertEqual("valueset-practitioner-role.json"); }
    @Test  void valueset_practitioner_specialty() throws Exception { assertEqual("valueset-practitioner-specialty.json"); }
    @Test  void valueset_precision_estimate_type() throws Exception { assertEqual("valueset-precision-estimate-type.json"); }
    @Test  void valueset_prepare_patient_prior_specimen_collection() throws Exception { assertEqual("valueset-prepare-patient-prior-specimen-collection.json"); }
    @Test @Tag("multi")  void valueset_probability_distribution_type() throws Exception { assertEqual("valueset-probability-distribution-type.json"); }
    @Test  void valueset_procedure_category() throws Exception { assertEqual("valueset-procedure-category.json"); }
    @Test  void valueset_procedure_code() throws Exception { assertEqual("valueset-procedure-code.json"); }
    @Test @Tag("multi")  void valueset_procedure_followup() throws Exception { assertEqual("valueset-procedure-followup.json"); }
    @Test  void valueset_procedure_not_performed_reason() throws Exception { assertEqual("valueset-procedure-not-performed-reason.json"); }
    @Test  void valueset_procedure_outcome() throws Exception { assertEqual("valueset-procedure-outcome.json"); }
    @Test  void valueset_procedure_progress_status_codes() throws Exception { assertEqual("valueset-procedure-progress-status-codes.json"); }
    @Test  void valueset_procedure_reason() throws Exception { assertEqual("valueset-procedure-reason.json"); }
    @Test  void valueset_process_priority() throws Exception { assertEqual("valueset-process-priority.json"); }
    @Test  void valueset_product_category() throws Exception { assertEqual("valueset-product-category.json"); }
    @Test  void valueset_product_status() throws Exception { assertEqual("valueset-product-status.json"); }
    @Test  void valueset_product_storage_scale() throws Exception { assertEqual("valueset-product-storage-scale.json"); }
    @Test  void valueset_program() throws Exception { assertEqual("valueset-program.json"); }
    @Test  void valueset_property_representation() throws Exception { assertEqual("valueset-property-representation.json"); }
    @Test  void valueset_provenance_activity_type() throws Exception { assertEqual("valueset-provenance-activity-type.json"); }
    @Test  void valueset_provenance_agent_role() throws Exception { assertEqual("valueset-provenance-agent-role.json"); }
    @Test  void valueset_provenance_agent_type() throws Exception { assertEqual("valueset-provenance-agent-type.json"); }
    @Test  void valueset_provenance_entity_role() throws Exception { assertEqual("valueset-provenance-entity-role.json"); }
    @Test  void valueset_provenance_history_agent_type() throws Exception { assertEqual("valueset-provenance-history-agent-type.json"); }
    @Test @Tag("multi")  void valueset_provenance_history_record_activity() throws Exception { assertEqual("valueset-provenance-history-record-activity.json"); }
    @Test  void valueset_provider_qualification() throws Exception { assertEqual("valueset-provider-qualification.json"); }
    @Test  void valueset_provider_taxonomy() throws Exception { assertEqual("valueset-provider-taxonomy.json"); }
    @Test  void valueset_publication_status() throws Exception { assertEqual("valueset-publication-status.json"); }
    @Test  void valueset_quality_type() throws Exception { assertEqual("valueset-quality-type.json"); }
    @Test  void valueset_quantity_comparator() throws Exception { assertEqual("valueset-quantity-comparator.json"); }
    @Test  void valueset_question_max_occurs() throws Exception { assertEqual("valueset-question-max-occurs.json"); }
    @Test  void valueset_questionnaire_answers_status() throws Exception { assertEqual("valueset-questionnaire-answers-status.json"); }
    @Test  void valueset_questionnaire_answers() throws Exception { assertEqual("valueset-questionnaire-answers.json"); }
    @Test  void valueset_questionnaire_category() throws Exception { assertEqual("valueset-questionnaire-category.json"); }
    @Test  void valueset_questionnaire_display_category() throws Exception { assertEqual("valueset-questionnaire-display-category.json"); }
    @Test  void valueset_questionnaire_enable_behavior() throws Exception { assertEqual("valueset-questionnaire-enable-behavior.json"); }
    @Test  void valueset_questionnaire_enable_operator() throws Exception { assertEqual("valueset-questionnaire-enable-operator.json"); }
    @Test  void valueset_questionnaire_item_control() throws Exception { assertEqual("valueset-questionnaire-item-control.json"); }
    @Test  void valueset_questionnaire_questions() throws Exception { assertEqual("valueset-questionnaire-questions.json"); }
    @Test  void valueset_questionnaire_usage_mode() throws Exception { assertEqual("valueset-questionnaire-usage-mode.json"); }
    @Test  void valueset_questionnaire() throws Exception { assertEqual("valueset-questionnaire.json"); }
    @Test  void valueset_questionnaireresponse_mode() throws Exception { assertEqual("valueset-questionnaireresponse-mode.json"); }
    @Test  void valueset_reaction_event_certainty() throws Exception { assertEqual("valueset-reaction-event-certainty.json"); }
    @Test  void valueset_reaction_event_severity() throws Exception { assertEqual("valueset-reaction-event-severity.json"); }
    @Test  void valueset_reason_medication_given_codes() throws Exception { assertEqual("valueset-reason-medication-given-codes.json"); }
    @Test  void valueset_reason_medication_not_given_codes() throws Exception { assertEqual("valueset-reason-medication-not-given-codes.json"); }
    @Test  void valueset_reason_medication_status_codes() throws Exception { assertEqual("valueset-reason-medication-status-codes.json"); }
    @Test  void valueset_recommendation_strength() throws Exception { assertEqual("valueset-recommendation-strength.json"); }
    @Test  void valueset_ref_sequences() throws Exception { assertEqual("valueset-ref-sequences.json"); }
    @Test  void valueset_reference_handling_policy() throws Exception { assertEqual("valueset-reference-handling-policy.json"); }
    @Test  void valueset_reference_version_rules() throws Exception { assertEqual("valueset-reference-version-rules.json"); }
    @Test  void valueset_referencerange_appliesto() throws Exception { assertEqual("valueset-referencerange-appliesto.json"); }
    @Test  void valueset_referencerange_meaning() throws Exception { assertEqual("valueset-referencerange-meaning.json"); }
    @Test  void valueset_rejection_criteria() throws Exception { assertEqual("valueset-rejection-criteria.json"); }
    @Test  void valueset_related_artifact_type() throws Exception { assertEqual("valueset-related-artifact-type.json"); }
    @Test  void valueset_related_claim_relationship() throws Exception { assertEqual("valueset-related-claim-relationship.json"); }
    @Test  void valueset_relatedperson_relationshiptype() throws Exception { assertEqual("valueset-relatedperson-relationshiptype.json"); }
    @Test  void valueset_relation_type() throws Exception { assertEqual("valueset-relation-type.json"); }
    @Test  void valueset_relationship() throws Exception { assertEqual("valueset-relationship.json"); }
    @Test  void valueset_remittance_outcome() throws Exception { assertEqual("valueset-remittance-outcome.json"); }
    @Test  void valueset_report_action_result_codes() throws Exception { assertEqual("valueset-report-action-result-codes.json"); }
    @Test  void valueset_report_codes() throws Exception { assertEqual("valueset-report-codes.json"); }
    @Test  void valueset_report_participant_type() throws Exception { assertEqual("valueset-report-participant-type.json"); }
    @Test  void valueset_report_result_codes() throws Exception { assertEqual("valueset-report-result-codes.json"); }
    @Test  void valueset_report_status_codes() throws Exception { assertEqual("valueset-report-status-codes.json"); }
    @Test  void valueset_repository_type() throws Exception { assertEqual("valueset-repository-type.json"); }
    @Test  void valueset_request_intent() throws Exception { assertEqual("valueset-request-intent.json"); }
    @Test  void valueset_request_priority() throws Exception { assertEqual("valueset-request-priority.json"); }
    @Test  void valueset_request_resource_types() throws Exception { assertEqual("valueset-request-resource-types.json"); }
    @Test  void valueset_request_status() throws Exception { assertEqual("valueset-request-status.json"); }
    @Test  void valueset_research_element_type() throws Exception { assertEqual("valueset-research-element-type.json"); }
    @Test  void valueset_research_study_objective_type() throws Exception { assertEqual("valueset-research-study-objective-type.json"); }
    @Test  void valueset_research_study_phase() throws Exception { assertEqual("valueset-research-study-phase.json"); }
    @Test  void valueset_research_study_prim_purp_type() throws Exception { assertEqual("valueset-research-study-prim-purp-type.json"); }
    @Test  void valueset_research_study_reason_stopped() throws Exception { assertEqual("valueset-research-study-reason-stopped.json"); }
    @Test  void valueset_research_study_status() throws Exception { assertEqual("valueset-research-study-status.json"); }
    @Test  void valueset_research_subject_status() throws Exception { assertEqual("valueset-research-subject-status.json"); }
    @Test  void valueset_resource_aggregation_mode() throws Exception { assertEqual("valueset-resource-aggregation-mode.json"); }
    @Test  void valueset_resource_security_category() throws Exception { assertEqual("valueset-resource-security-category.json"); }
    @Test  void valueset_resource_slicing_rules() throws Exception { assertEqual("valueset-resource-slicing-rules.json"); }
    @Test  void valueset_resource_status() throws Exception { assertEqual("valueset-resource-status.json"); }
    @Test  void valueset_resource_type_link() throws Exception { assertEqual("valueset-resource-type-link.json"); }
    @Test  void valueset_resource_types() throws Exception { assertEqual("valueset-resource-types.json"); }
    @Test  void valueset_resource_validation_mode() throws Exception { assertEqual("valueset-resource-validation-mode.json"); }
    @Test  void valueset_response_code() throws Exception { assertEqual("valueset-response-code.json"); }
    @Test  void valueset_restful_capability_mode() throws Exception { assertEqual("valueset-restful-capability-mode.json"); }
    @Test  void valueset_restful_security_service() throws Exception { assertEqual("valueset-restful-security-service.json"); }
    @Test  void valueset_risk_estimate_type() throws Exception { assertEqual("valueset-risk-estimate-type.json"); }
    @Test  void valueset_risk_probability() throws Exception { assertEqual("valueset-risk-probability.json"); }
    @Test  void valueset_route_codes() throws Exception { assertEqual("valueset-route-codes.json"); }
    @Test  void valueset_search_comparator() throws Exception { assertEqual("valueset-search-comparator.json"); }
    @Test  void valueset_search_entry_mode() throws Exception { assertEqual("valueset-search-entry-mode.json"); }
    @Test  void valueset_search_modifier_code() throws Exception { assertEqual("valueset-search-modifier-code.json"); }
    @Test  void valueset_search_param_type() throws Exception { assertEqual("valueset-search-param-type.json"); }
    @Test  void valueset_search_xpath_usage() throws Exception { assertEqual("valueset-search-xpath-usage.json"); }
    @Test  void valueset_secondary_finding() throws Exception { assertEqual("valueset-secondary-finding.json"); }
    @Test  void valueset_security_labels() throws Exception { assertEqual("valueset-security-labels.json"); }
    @Test @Tag("multi")  void valueset_security_role_type() throws Exception { assertEqual("valueset-security-role-type.json"); }
    @Test  void valueset_sequence_quality_method() throws Exception { assertEqual("valueset-sequence-quality-method.json"); }
    @Test  void valueset_sequence_quality_standardSequence() throws Exception { assertEqual("valueset-sequence-quality-standardSequence.json"); }
    @Test  void valueset_sequence_referenceSeq() throws Exception { assertEqual("valueset-sequence-referenceSeq.json"); }
    @Test  void valueset_sequence_species() throws Exception { assertEqual("valueset-sequence-species.json"); }
    @Test  void valueset_sequence_type() throws Exception { assertEqual("valueset-sequence-type.json"); }
    @Test  void valueset_sequenceontology() throws Exception { assertEqual("valueset-sequenceontology.json"); }
    @Test  void valueset_series_performer_function() throws Exception { assertEqual("valueset-series-performer-function.json"); }
    @Test  void valueset_service_category() throws Exception { assertEqual("valueset-service-category.json"); }
    @Test  void valueset_service_modifiers() throws Exception { assertEqual("valueset-service-modifiers.json"); }
    @Test  void valueset_service_pharmacy() throws Exception { assertEqual("valueset-service-pharmacy.json"); }
    @Test  void valueset_service_place() throws Exception { assertEqual("valueset-service-place.json"); }
    @Test  void valueset_service_product() throws Exception { assertEqual("valueset-service-product.json"); }
    @Test  void valueset_service_provision_conditions() throws Exception { assertEqual("valueset-service-provision-conditions.json"); }
    @Test  void valueset_service_referral_method() throws Exception { assertEqual("valueset-service-referral-method.json"); }
    @Test  void valueset_service_type() throws Exception { assertEqual("valueset-service-type.json"); }
    @Test  void valueset_service_uscls() throws Exception { assertEqual("valueset-service-uscls.json"); }
    @Test  void valueset_servicerequest_category() throws Exception { assertEqual("valueset-servicerequest-category.json"); }
    @Test  void valueset_servicerequest_orderdetail() throws Exception { assertEqual("valueset-servicerequest-orderdetail.json"); }
    @Test  void valueset_sibling_relationship_codes() throws Exception { assertEqual("valueset-sibling-relationship-codes.json"); }
    @Test  void valueset_signature_type() throws Exception { assertEqual("valueset-signature-type.json"); }
    @Test  void valueset_slotstatus() throws Exception { assertEqual("valueset-slotstatus.json"); }
    @Test  void valueset_smart_capabilities() throws Exception { assertEqual("valueset-smart-capabilities.json"); }
    @Test  void valueset_sort_direction() throws Exception { assertEqual("valueset-sort-direction.json"); }
    @Test  void valueset_spdx_license() throws Exception { assertEqual("valueset-spdx-license.json"); }
    @Test  void valueset_special_values() throws Exception { assertEqual("valueset-special-values.json"); }
    @Test @Tag("multi")  void valueset_specimen_collection_method() throws Exception { assertEqual("valueset-specimen-collection-method.json"); }
    @Test  void valueset_specimen_collection_priority() throws Exception { assertEqual("valueset-specimen-collection-priority.json"); }
    @Test @Tag("multi")  void valueset_specimen_collection() throws Exception { assertEqual("valueset-specimen-collection.json"); }
    @Test  void valueset_specimen_contained_preference() throws Exception { assertEqual("valueset-specimen-contained-preference.json"); }
    @Test  void valueset_specimen_container_type() throws Exception { assertEqual("valueset-specimen-container-type.json"); }
    @Test  void valueset_specimen_processing_procedure() throws Exception { assertEqual("valueset-specimen-processing-procedure.json"); }
    @Test  void valueset_specimen_status() throws Exception { assertEqual("valueset-specimen-status.json"); }
    @Test  void valueset_standards_status() throws Exception { assertEqual("valueset-standards-status.json"); }
    @Test  void valueset_strand_type() throws Exception { assertEqual("valueset-strand-type.json"); }
    @Test  void valueset_structure_definition_kind() throws Exception { assertEqual("valueset-structure-definition-kind.json"); }
    @Test  void valueset_study_type() throws Exception { assertEqual("valueset-study-type.json"); }
    @Test  void valueset_subject_type() throws Exception { assertEqual("valueset-subject-type.json"); }
    @Test  void valueset_subscriber_relationship() throws Exception { assertEqual("valueset-subscriber-relationship.json"); }
    @Test  void valueset_subscription_channel_type() throws Exception { assertEqual("valueset-subscription-channel-type.json"); }
    @Test  void valueset_subscription_status() throws Exception { assertEqual("valueset-subscription-status.json"); }
    @Test  void valueset_subscription_tag() throws Exception { assertEqual("valueset-subscription-tag.json"); }
    @Test  void valueset_substance_category() throws Exception { assertEqual("valueset-substance-category.json"); }
    @Test  void valueset_substance_code() throws Exception { assertEqual("valueset-substance-code.json"); }
    @Test  void valueset_substance_status() throws Exception { assertEqual("valueset-substance-status.json"); }
    @Test @Tag("multi")  void valueset_supplement_type() throws Exception { assertEqual("valueset-supplement-type.json"); }
    @Test  void valueset_supply_item() throws Exception { assertEqual("valueset-supply-item.json"); }
    @Test  void valueset_supplydelivery_status() throws Exception { assertEqual("valueset-supplydelivery-status.json"); }
    @Test  void valueset_supplydelivery_type() throws Exception { assertEqual("valueset-supplydelivery-type.json"); }
    @Test  void valueset_supplyrequest_kind() throws Exception { assertEqual("valueset-supplyrequest-kind.json"); }
    @Test  void valueset_supplyrequest_reason() throws Exception { assertEqual("valueset-supplyrequest-reason.json"); }
    @Test  void valueset_supplyrequest_status() throws Exception { assertEqual("valueset-supplyrequest-status.json"); }
    @Test  void valueset_surface() throws Exception { assertEqual("valueset-surface.json"); }
    @Test  void valueset_synthesis_type() throws Exception { assertEqual("valueset-synthesis-type.json"); }
    @Test  void valueset_system_restful_interaction() throws Exception { assertEqual("valueset-system-restful-interaction.json"); }
    @Test  void valueset_task_code() throws Exception { assertEqual("valueset-task-code.json"); }
    @Test  void valueset_task_intent() throws Exception { assertEqual("valueset-task-intent.json"); }
    @Test  void valueset_task_status() throws Exception { assertEqual("valueset-task-status.json"); }
    @Test  void valueset_teeth() throws Exception { assertEqual("valueset-teeth.json"); }
    @Test  void valueset_template_status_code() throws Exception { assertEqual("valueset-template-status-code.json"); }
    @Test  void valueset_testscript_operation_codes() throws Exception { assertEqual("valueset-testscript-operation-codes.json"); }
    @Test  void valueset_testscript_profile_destination_types() throws Exception { assertEqual("valueset-testscript-profile-destination-types.json"); }
    @Test  void valueset_testscript_profile_origin_types() throws Exception { assertEqual("valueset-testscript-profile-origin-types.json"); }
    @Test @Tag("multi")  void valueset_texture_code() throws Exception { assertEqual("valueset-texture-code.json"); }
    @Test  void valueset_timezones() throws Exception { assertEqual("valueset-timezones.json"); }
    @Test @Tag("multi")  void valueset_timing_abbreviation() throws Exception { assertEqual("valueset-timing-abbreviation.json"); }
    @Test  void valueset_tooth() throws Exception { assertEqual("valueset-tooth.json"); }
    @Test  void valueset_transaction_mode() throws Exception { assertEqual("valueset-transaction-mode.json"); }
    @Test  void valueset_trigger_type() throws Exception { assertEqual("valueset-trigger-type.json"); }
    @Test  void valueset_type_derivation_rule() throws Exception { assertEqual("valueset-type-derivation-rule.json"); }
    @Test @Tag("multi")  void valueset_type_restful_interaction() throws Exception { assertEqual("valueset-type-restful-interaction.json"); }
    @Test  void valueset_ucum_bodylength() throws Exception { assertEqual("valueset-ucum-bodylength.json"); }
    @Test  void valueset_ucum_bodytemp() throws Exception { assertEqual("valueset-ucum-bodytemp.json"); }
    @Test  void valueset_ucum_bodyweight() throws Exception { assertEqual("valueset-ucum-bodyweight.json"); }
    @Test @Tag("multi")  void valueset_ucum_common() throws Exception { assertEqual("valueset-ucum-common.json"); }
    @Test  void valueset_ucum_units() throws Exception { assertEqual("valueset-ucum-units.json"); }
    @Test @Tag("multi")  void valueset_ucum_vitals_common() throws Exception { assertEqual("valueset-ucum-vitals-common.json"); }
    @Test  void valueset_udi_entry_type() throws Exception { assertEqual("valueset-udi-entry-type.json"); }
    @Test  void valueset_udi() throws Exception { assertEqual("valueset-udi.json"); }
    @Test  void valueset_units_of_time() throws Exception { assertEqual("valueset-units-of-time.json"); }
    @Test  void valueset_unknown_content_code() throws Exception { assertEqual("valueset-unknown-content-code.json"); }
    @Test  void valueset_usage_context_type() throws Exception { assertEqual("valueset-usage-context-type.json"); }
    @Test @Tag("multi")  void valueset_use_context() throws Exception { assertEqual("valueset-use-context.json"); }
    @Test  void valueset_vaccine_code() throws Exception { assertEqual("valueset-vaccine-code.json"); }
    @Test  void valueset_variable_type() throws Exception { assertEqual("valueset-variable-type.json"); }
    @Test  void valueset_variant_state() throws Exception { assertEqual("valueset-variant-state.json"); }
    @Test  void valueset_variants() throws Exception { assertEqual("valueset-variants.json"); }
    @Test  void valueset_verificationresult_can_push_updates() throws Exception { assertEqual("valueset-verificationresult-can-push-updates.json"); }
    @Test  void valueset_verificationresult_communication_method() throws Exception { assertEqual("valueset-verificationresult-communication-method.json"); }
    @Test  void valueset_verificationresult_failure_action() throws Exception { assertEqual("valueset-verificationresult-failure-action.json"); }
    @Test  void valueset_verificationresult_need() throws Exception { assertEqual("valueset-verificationresult-need.json"); }
    @Test  void valueset_verificationresult_primary_source_type() throws Exception { assertEqual("valueset-verificationresult-primary-source-type.json"); }
    @Test  void valueset_verificationresult_push_type_available() throws Exception { assertEqual("valueset-verificationresult-push-type-available.json"); }
    @Test  void valueset_verificationresult_status() throws Exception { assertEqual("valueset-verificationresult-status.json"); }
    @Test  void valueset_verificationresult_validation_process() throws Exception { assertEqual("valueset-verificationresult-validation-process.json"); }
    @Test  void valueset_verificationresult_validation_status() throws Exception { assertEqual("valueset-verificationresult-validation-status.json"); }
    @Test  void valueset_verificationresult_validation_type() throws Exception { assertEqual("valueset-verificationresult-validation-type.json"); }
    @Test  void valueset_versioning_policy() throws Exception { assertEqual("valueset-versioning-policy.json"); }
    @Test  void valueset_vision_base_codes() throws Exception { assertEqual("valueset-vision-base-codes.json"); }
    @Test  void valueset_vision_eye_codes() throws Exception { assertEqual("valueset-vision-eye-codes.json"); }
    @Test  void valueset_vision_product() throws Exception { assertEqual("valueset-vision-product.json"); }
    @Test @Tag("multi")  void valueset_written_language() throws Exception { assertEqual("valueset-written-language.json"); }
    @Test  void valueset_profile() throws Exception { assertEqual("valueset.profile.json"); }
    @Test @Tag("bundle")  void valuesets() throws Exception { assertEqual("valuesets.json"); }
    @Test  void verificationresult_example() throws Exception { assertEqual("verificationresult-example.json"); }
    @Test  void verificationresult_questionnaire() throws Exception { assertEqual("verificationresult-questionnaire.json"); }
    @Test  void verificationresult_profile() throws Exception { assertEqual("verificationresult.profile.json"); }
    @Test  void visionprescription_example_1() throws Exception { assertEqual("visionprescription-example-1.json"); }
    @Test  void visionprescription_example() throws Exception { assertEqual("visionprescription-example.json"); }
    @Test  void visionprescription_questionnaire() throws Exception { assertEqual("visionprescription-questionnaire.json"); }
    @Test  void visionprescription_profile() throws Exception { assertEqual("visionprescription.profile.json"); }
    @Test  void vitalsigns_questionnaire() throws Exception { assertEqual("vitalsigns-questionnaire.json"); }
    @Test  void vitalsigns_profile() throws Exception { assertEqual("vitalsigns.profile.json"); }
    @Test  void vitalspanel_questionnaire() throws Exception { assertEqual("vitalspanel-questionnaire.json"); }
    @Test  void vitalspanel_profile() throws Exception { assertEqual("vitalspanel.profile.json"); }
    @Test @Tag("bundle")  void xds_example() throws Exception { assertEqual("xds-example.json"); }
    @Test
    void xhtml_profile() throws Exception { assertEqual("xhtml.profile.json"); }
    
}
